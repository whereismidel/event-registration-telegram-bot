package com.midel.eventregistrationtelegrambot.telegram.controller;

import com.midel.eventregistrationtelegrambot.entity.User;
import com.midel.eventregistrationtelegrambot.entity.enums.State;
import com.midel.eventregistrationtelegrambot.entity.enums.Status;
import com.midel.eventregistrationtelegrambot.repository.UserRepository;
import com.midel.eventregistrationtelegrambot.telegram.TelegramSender;
import com.midel.eventregistrationtelegrambot.telegram.annotation.Action;
import com.midel.eventregistrationtelegrambot.telegram.annotation.AdminAction;
import com.midel.eventregistrationtelegrambot.telegram.annotation.Handle;
import com.midel.eventregistrationtelegrambot.telegram.annotation.TelegramController;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@TelegramController
@RequiredArgsConstructor
@Slf4j
public class CommandController {

    private final TelegramSender telegramSender;
    private final UserRepository userRepository;

    @Handle(value = Action.COMMAND, command = "start")
    public void startCommand(List<String> arguments, Update update) {

        User user = userRepository.getUserById(update.getMessage().getFrom().getId()).orElse(null);

        if (user == null) {
//            telegramSender.htmlMessage(update.getMessage().getChatId(), """
//                    <b>–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ —Ç–≤–æ—î—ó –ø–µ—Ä—à–æ—ó —Å—Ç–∏–ø–µ–Ω–¥—ñ—ó –∑–∞ –≤—Å—Ç—É–ø –¥–æ –ù–ê–£.</b>
//
//                    –í–∏–ø—É—Å–∫–Ω–∏–∫–∏ –ù–ê–£ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Ñ–æ–Ω–¥, —â–æ–± <b><u>—Ä–æ–∑—ñ–≥—Ä–∞—Ç–∏ 20 –ø–µ—Ä—à–∏—Ö —Å—Ç–∏–ø–µ–Ω–¥—ñ–π —É —Ä–æ–∑–º—ñ—Ä—ñ 3000 –≥—Ä–Ω</u></b> —Å–µ—Ä–µ–¥ —Ç–∏—Ö, —Ö—Ç–æ —Å—Ç–∞–Ω–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–º —Ü—å–æ–≥–æ —Ä–æ–∫—É.
//
//                    <u>–Ø–∫ —Å—Ç–∞—Ç–∏ –æ–¥–Ω–∏–º/–æ–¥–Ω—ñ—î—é –∑ 20 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤:</u>
//                    1. <b>–ü—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é</b> —É —Ü—å–æ–º—É –±–æ—Ç—ñ
//                    2. <b>–í—Å—Ç—É–ø–∏—Ç–∏ –¥–æ –ù–ê–£</b> –Ω–∞ –±–∞–∫–∞–ª–∞–≤—Ä–∞ –Ω–∞ –±–∞–∑—ñ –ü–°–ó–û
//                    3. <b>–ù–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –±–æ—Ç–∞</b> –¥–æ 1 –≤–µ—Ä–µ—Å–Ω—è, –∞–¥–∂–µ —Å–∞–º–µ —á–µ—Ä–µ–∑ –Ω—å–æ–≥–æ –º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –ø–µ—Ä–µ–º–æ–∂—Ü—è–º–∏
//
//                    üìÑ<b><a href="https://vstup2024.nau.edu.ua/rules">–ü—Ä–∞–≤–∏–ª–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—É</a></b>
//                    """);

            telegramSender.htmlMessage(update.getMessage().getChatId(), """
                    –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–µ–±–µ —è–∫ —É—á–∞—Å–Ω–∏–∫–∞/—Ü—ñ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç–≤–æ—î <i>–ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</i>. –ù–∞–¥–∞—é—á–∏ —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–∞—î—à –∑–≥–æ–¥—É –Ω–∞ —ó—ó –æ–±—Ä–æ–±–∫—É –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –≤—Å—Ç—É–ø–Ω–æ—ó –∫–∞–º–ø–∞–Ω—ñ—ó –ù–ê–£.
                    
                    <u>–ù–µ —Ö–≤–∏–ª—é–π—Å—è, —Ü—ñ –¥–∞–Ω—ñ –∑–∞—Ö–∏—â–µ–Ω—ñ —Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ª–∏—à–µ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è.</u>
                    """);

            user = User.builder()
                    .id(update.getMessage().getFrom().getId())
                    .state(State.NAME)
                    .status(Status.ACTIVE)
                    .username(update.getMessage().getFrom().getUserName())
                    .build();

            user = userRepository.save(user);
        }

        handleState(update, user);
    }

    @Handle(value = Action.COMMAND, command = "notify")
    @AdminAction
    public void notifyCommand(List<String> arguments, Update update) {

        if (update.getMessage().getReplyToMessage() == null) {
            telegramSender.htmlMessage(update.getMessage().getChatId(),
                    """
                        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
                        –í—ñ–¥–º—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —ñ –Ω–∞–ø–∏—à–∏ /notify
                        """);
            return;
        }

        List<User> userList = userRepository.findAll();
        long delay = 200;

        try (ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1)) {
            for (int i = 0; i < userList.size(); i++) {
                int finalI = i;
                scheduler.schedule(() ->
                                telegramSender.forwardMessage(update.getMessage().getChatId(), update.getMessage().getReplyToMessage().getMessageId(), userList.get(finalI).getId()),
                        delay * i,
                        TimeUnit.MILLISECONDS
                );
            }

            scheduler.schedule(() -> {
                telegramSender.htmlMessage(update.getMessage().getChatId(), "–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                scheduler.shutdown();
            }, delay * userList.size(), TimeUnit.MILLISECONDS);
        }
    }


    @Handle(value = Action.COMMAND, command = "block")
    @AdminAction
    public void blockCommand(List<String> arguments, Update update) {



        if (arguments == null || arguments.size() != 1) {

            telegramSender.htmlMessage(update.getMessage().getChatId(),
                    """
                        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
                        /block userId
                        """);
            return;
        }

        long userId;
        try {
            userId = Long.parseLong(arguments.getFirst());
        } catch (Exception e) {
            telegramSender.htmlMessage(update.getMessage().getChatId(),
                    """
                        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
                        /block userId
                        """);
            return;
        }
        User user = userRepository.getUserById(userId).orElse(null);

        if (user == null) {
            telegramSender.htmlMessage(update.getMessage().getChatId(),
                    """
                        User not found.
                        """);
            return;
        }

//        userRepository.delete(user);

    }

    @Handle(value = Action.COMMAND, command = "not_found")
    @AdminAction
    public void notFoundCommand(List<String> arguments, Update update) {
        telegramSender.htmlMessage(update.getMessage().getChatId(), "Command doesn't exist.");
    }

    @Handle(value = Action.REPLY_TO, command = "BY_USER_STATE")
    public void stateReply(List<String> arguments, Update update) {

        User user = userRepository.getUserById(update.getMessage().getFrom().getId()).orElse(null);
        if (user == null) {
            startCommand(arguments, update);
            return;
        }

        String userInput;
        if (update.getMessage().hasContact()) {
            userInput = update.getMessage().getContact().getPhoneNumber();
        } else {
            userInput = update.getMessage().getText();
        }

        user.setState(
                switch (user.getState()) {
                    case NAME -> {
                        user.setFirstName(Character.toUpperCase(userInput.charAt(0)) + userInput.substring(1).toLowerCase());

                        yield State.SURNAME;
                    }
                    case SURNAME -> {
                        user.setLastName(Character.toUpperCase(userInput.charAt(0)) + userInput.substring(1).toLowerCase());
                        yield State.PHONE;
                    }
                    case PHONE -> {

                        if (userInput.length() < 10 || !userInput.matches("[\\d\\s+]+")) {
                            telegramSender.htmlMessage(update.getMessage().getChatId(),"""
                            –í–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä –Ω–µ —î –¥—ñ–π—Å–Ω–∏–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.
                            """);
                            yield State.PHONE;
                        }

                        user.setPhoneNumber(
                                "+38" + userInput
                                    .replace(" ", "")
                                    .replaceFirst("^\\+?38", "")
                        );

                        telegramSender.htmlMessage(
                                update.getMessage().getChatId(),
                        String.format("""
                        <b>–î—è–∫—É—é! –¢–µ–ø–µ—Ä —Ç–∏ –ø—Ä–∏–π–º–∞—î—à —É—á–∞—Å—Ç—å —É –ê–∫—Ü—ñ—ó –ú–æ—è –ø–µ—Ä—à–∞ —Å—Ç–∏–ø–µ–Ω–¥—ñ—è</b>

                        –¢–≤–æ—ó –¥–∞–Ω—ñ:
                        –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ - %s
                        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É - %s

                        <i>–ù–µ –±–ª–æ–∫—É–π –±–æ—Ç–∞, –∞–¥–∂–µ —Å–∞–º–µ —Ç—É—Ç 1 –≤–µ—Ä–µ—Å–Ω—è –º–∏ –∞–Ω–æ–Ω—Å—É—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è: <b>–º–æ–∂–ª–∏–≤–æ —Ü–µ –±—É–¥–µ—à —Å–∞–º–µ —Ç–∏!</b></i>
                        """, user.getFirstName() + " " + user.getLastName(), user.getPhoneNumber()));
                        yield State.REGISTERED;
                    }

                    case REGISTERED -> State.REGISTERED;
                }
        );

        userRepository.save(user);
        handleState(update, user);
    }

    private void handleState(Update update, User user) {
        String message;
        switch (user.getState()) {
            case NAME -> {
                message = """
                        –ù–∞–ø–∏—à–∏ —Å–≤–æ—î <u><b>—ñ–º'—è</b></u>. –ü—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω
                        """;
                telegramSender.htmlMessage(update.getMessage().getChatId(), message);
            }
            case SURNAME -> {
                message = """
                        –ù–∞–ø–∏—à–∏ —Å–≤–æ—î <u><b>–ø—Ä—ñ–∑–≤–∏—â–µ</b></u>. –ü—Ä–∏–∫–ª–∞–¥: –ü–µ—Ç—Ä–æ—â—É–∫
                        """;
                telegramSender.htmlMessage(update.getMessage().getChatId(), message);
            }
            case PHONE -> {
                message = """
                        –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π <u><b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b></u>. –ú–æ–∂–µ—à —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ
                        –ê–±–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –≤—Ä—É—á–Ω—É. –ü—Ä–∏–∫–ª–∞–¥: 0681345903

                        <u>–í—ñ–Ω –Ω–∞–º –±—É–¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π, —â–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—å –∑ —Ç–æ–±–æ—é —É —Ä–∞–∑—ñ –ø–µ—Ä–µ–º–æ–≥–∏! –¢–æ–º—É –≤–∫–∞–∑—É–π —É–≤–∞–∂–Ω–æ</u>
                        """;
                telegramSender.requestContact(update.getMessage().getChatId(), message);
            }
            case REGISTERED  -> {
                message = """
                        <b>–ê –ø–æ–∫–∏ —á–µ–∫–∞—î—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤..</b>
                        
                        <b>–ü—ñ–¥–ø–∏—à–∏—Å—å</b> –Ω–∞ –∫–∞–Ω–∞–ª –≤—Å—Ç—É–ø–Ω–∏–∫–∞, —â–æ–± —Ç–æ—á–Ω–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ –≤—Å—Ç—É–ø.
                        
                        –¢–∞–∫–æ–∂ <b>–¥–æ–ª—É—á–∞–π—Å—è –¥–æ —á–∞—Ç—É</b> –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤, —â–æ–± –≤ —Ä–µ–∂–∏–º—ñ –æ–Ω–ª–∞–π–Ω –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –¥–≤—ñ–∂ –≤ –ù–ê–£ –≤—ñ–¥ –Ω–∞—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
                        
                        <b><a href="https://t.me/pknau">–í—Å—Ç—É–ø–Ω–∏–∫ –ù–ê–£</a> | <a href="https://t.me/nau_abit_chat">–ß–∞—Ç –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤</a></b>
                        """;
                telegramSender.htmlMessageWithBottomPhoto(update.getMessage().getChatId(), message, "https://telegra.ph/file/13e6fded376bb93add4c2.png");
            }
        }
    }

}

